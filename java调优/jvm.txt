JVM:
	1. 程序计数器
		当前线程所执行字节码的行号指示器
		程序流程指示器
		分支、循环、跳转、异常处理、线程恢复
		线程私有内存
			
	2. 虚拟机栈
		(1)存储 局部变量表、操作数栈、动态连接、方法出口 等信息
		(2)每个方法被执行的时候，JVM会同步创建一个栈帧(stack frame)
		
		局部变量表：存放编译期可知的JVM各数据类型(boolean,int,byte,char,short,double,long,float,对象引用(refrence),returnAddress)
		局部变量存储以局部变量槽(slot)的方式表示
		long和double占两个槽，其他类型占一个
		
		所需内存在编译期完成分配
		方法运行期不会改变局部变量表大小(大小指的是槽，而不是内存)
		进入一个方法时，所需要的局部变量空间是完全确定的
		
	
	3. 本地方法栈(可能有的jvm将其和VM Stack合二为一)
		VM Stack为JVM执行java方法服务
		本地方法栈为本地(Native)方法服务
		
	4. 堆(gc堆)
		虚拟机规范：所有对象实例及数组应在堆上分配
		
		垃圾收集管理的内存区域
		
		(1)内存最大
		(2)线程共享
		(3)虚拟机启动时创建
		(4)存放对象实例(几乎所有对象实例在此分配内存)
		
		线程私有的分配缓冲区(Thread Local Allocation Buffer TLAB) => 提高对象分配效率
		
	5. 方法区(Non-Heap 非堆)
		存储已被JVM加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存
			
		不实现垃圾收集
		不需要连续内存
		可选固定大小或者可扩展
		
	6. 运行时常量池
		方法区的一部分
		存储常量池表，用于存放编译期生成的各种字面量与符号引用
	
	7. 直接内存
		不是JVM定义的内存区域
		不是JVM运行时数据区的一部分
	
	
OOM
	1. 程序计数器没有任何OOM情况
	2. 虚拟机栈、本地方法栈、堆、方法区、运行时常量区、直接内存有OOM情况

StackOverflowError
	1. 虚拟机栈有
	
线程
	1. 程序计数器、虚拟机栈线程私有
	2. 堆、方法区 线程共享
	
JVM
	在物理上内存可以不连续，在逻辑上视为连续内存
	
VM Stack
	局部变量空间是确定的

运行时常量池
	可以改变，如String.internal()
	
直接内存
	不受JVM堆大小限制
	
gc
	堆