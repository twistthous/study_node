Docker File
	1.关键词
		(1)FROM
		   FROM scratch //制作base image
		   FROM centos  //使用基础镜像
		(2)LABEL
			定义了image的metadata
			metadata不可少
		(3)RUN
			去运行一些命令
			1)为了美观，复杂的命令使用反斜线换行
			2)避免无用分层，合并多条命令成一行
		(4)WORKDIR
			设定当前工作目录
			WORKDIR /test //如果没有会自动创建test目录
			WORKDIR demo
			RUN pwd //输出结果应该是/test/demo
			
			1)用WORKDIR,不要RUN cd  
			2)尽量使用绝对目录
		(5) ADD and COPPY
			add添加到指定目录还可以解压缩，copy不行
			大部分情况，copy优于add
			add除了copy还有额外的解压功能
			添加远程文件/目录请使用curl或者wget
		
			ADD hello /
			ADD test.tar.gz /  添加到根目录并解压
			
			WORKDIR /root
			ADD hello test/  ==> /root/test/hello
			
			WORKDIR /root
			COPY hello test/
		(6)ENV 
			尽量使用ENV增加可维护性
			
			ENV MYSQL_VERSION 5.6 设置常量
			RUN apt-get install -y mysql-server="${MYSQL_VERSION}" \
				&& rm -rf /var/lib/apt/lists/*
				
		(7) RUN CMD ENTRYPOINT
			RUN:执行命令并创建新的Image Layer
			CMD:设置容器启动后默认执行的命令和参数
			ENTRYPOINT:设置容器启动时运行的命令
			
			1) shell格式
				RUN apt-get install -y vim
				CMD echo "hello docker"
				ENTRYPOINT echo "hello docker"
				
			2) exec格式
				RUN["apt-get", "install", "-y", "vim"]
				CMD["/bin/echo", "hello docker"]
				ENTRYPOINT["/bin/echo", "hello docker"]
				
				ENV name docker
				ENTRYPOINT ["/bin/echo", "hello $name"] => hello $name
				ENTRYPOINT ["/bin/bash", "-c" ,"echo hello $name"]
				-c后面要只有一个参数
				
				CMD
				容器启动时默认执行的命令
				如果docker run指定了其他命令，CMD命令被忽略
				如果定义了多个CMD,只有最后一行执行
				
				ENTRYPOINT
				让容器以应用程序或者服务的形式运行
				不会被忽略，一定会执行
				写一个shell脚本作为entrypoint