一.图论的应用

二.图的表示
	
	顶点 Vertex
	边 Edge
	
	1.图的分类	
		(1)无向图 Undirected Graph
			社交网络的 好友 关系
			
		(2)有向图 Directed Graph(边有方向)
			社交网络的 关注 关系
		
		(3)无权图
			边上没有信息
		
		(4)有权图
			边上有信息
			
		(5)有权无向图
		
		(6)无权无向图
		
		(7)有权有向图
		
		(8)有权无向图
			
		最小生成树适合有权图
		拓扑排序适合有向图
		最短路径适合所有图
	
	2.图的基本概念
		无向无权图
			(1)两点相邻
			(2)点的邻边
			(3)路径Path
			(4)环Loop
			(5)自环边 自己到自己也是一条边
			(6)平行边 两个顶点之间可能有两条边
			(7)没有自环边，没有平行边，是简单图
			(8)一张图不一定所有图都连接起来
			(9)联通分量(可以相互抵达的顶点的集合是联通分量)
			(10)无环图，图没有环(树是一种无环图)
			(11)图无环不一定是树，可能有结点没有联通，联通的无环图是树
			(12)联通图的生成树(包含所有顶点的树，但不一定包含所有边，边数v-1)
			(13)一个图一定有生成树
			(14)生成森林
			(15)主要关注生成树
			(16)一个顶点的度degree
				对于无向图，这个顶点相邻的边数（对于简单图）
				
			
		邻接矩阵(无向无权图) 
			空间复杂度O(V^2)
			时间复杂度
				建表: O(E)
				查看两个点是否相邻O(1)
				求一个点的相邻节点：O(V)
				
			可以通过一个矩阵来表示出一个图的关系
			(1)A[i][j] = 1表示顶点i和顶点j相邻
			(2)对于简单图：主对角线为0
			(3)对于无向图，矩阵关于主对角线对称
			
		邻接表
			空间复杂度O(V+E)
			时间复杂度
				建图 O(E)
					如果查重 O(E + V)
				查看两点是否相邻 O(degree(v))
				求一个点的相邻节点：O(degree(v))
				
				邻接表 查看相邻建图慢
					快速查重吃
					快速查重看两点是否相邻 
						不使用LinkedList
						使用哈希表 HashSet O(1)
						使用红黑树 TreeSet O(logV) v是顶点数量
							1.红黑树保持节点顺序
							2.比哈希表更节省空间
								空间O(V+E)
								建图O(ElogV)
								查看两点是否相邻O(logV)
								查邻边 O(degree(V)) / O(V)
							3.深度遍历
								(1)复杂度 O(V+E)
								(2)作用：
								求图的联通分量
								求两点间是否可达
								求两点间的一条路径
								检测图中是否有环
								二分图检测
								寻找图中的桥
								寻找图中的割点
								哈密尔顿路径
								拓扑排序
								
			稀疏图 稠密图（没有固定标准）
			完全图（每一个点都和其他的点相连）
			大多数是稀疏图
			
			链表存储
		