一.计算机的体系与结构
	1.冯诺依曼体系
		将程序指令和数据一起存储的计算机设计概念结构
		存储程序指令设计通用电路
		
		(1)必须有一个存储器
		(2)必须有一个控制器
		(3)必须有一个运算器
		(4)必须有输入设备
		(5)必须有输出设备
		//必须完成四点内容
		(6)能够把需要的程序和数据送至计算机
		(7)能够长期记忆程序、数据、中间结果及最终运算结果的能力
		(8)能够具备算数、逻辑运算和数据传送等数据加工处理的能力
		(9)能够按照要求将处理结果输出给用户
		
		CPU  = 运算器 + 控制器
		
	2.冯诺依曼瓶颈
		cpu处理速度快，存储设备传输速度慢 => cpu经常空转等待数据传输
		
	3.现在计算机的结构
		在冯诺依曼体系结构基础上进行修改
		解决CPU与存储设备之间的性能差异问题
		
		CPU = 运算器 + 控制器 + 存储器(磁带、硬盘)
		更高速的设备 => 内存、CPU的寄存器
		现在计算机可以理解为以存储器为核心
		
二.计算机的层次与编程语言
	1.程序的翻译与程序解释
		(1)程序翻译
		较为高级的计算机语言L1 -生成（编译器）-> 较为低级的计算机语言L0(计算机实际执行的语言)
		
		(2)程序解释
		较为高级的计算机语言L1 -作为输入-> 使用L0语言实现另一个程序(解释器)
		-> 较为低级的语言L0
		
		区别
		(1)计算机执行的指令都是L0
		(2)翻译过程生成新的L0程序，解释过程不生成新的L0程序
		(3)解释过程由L0编写的解释器去解释L1程序
		
		程序翻译: c/c++ Object-c Golang
		程序解释：Python Php JavaScript
		翻译+解释: java c# java程序 --编译-> JVM字节码 --解释->机器码 
		
	2.计算机的层次与编程语言
		硬件逻辑层 -> 微程
		序机器层 -> 传统机器层 (这三层是实际机器)
		-> 操作系统层 -> 汇编语言层 -> 高级语言层 -> 应用层 (虚拟机器层)
		
		(1)硬件逻辑层
			门、触发器等逻辑电路的组成
			属于电子工程的领域
		
		(2)微程序机器层
			编程语言是微指令集
			微指令所组成的微程序直接交由硬件执行
			
		(3)传统机器层
			编程语言是CPU指令集(机器指令)
			编程语言和硬件直接相关
			不同架构的CPU使用不同的CPU指令集

		一条机器指令对应一个微程序
		一个微程序对应一组微指令
		微指令 < 微程序 = 机器指令

		(4)操作系统层
			向上提供了简易的操作界面
			向下对接了指定系统，管理硬件资源
			
		(5)汇编语言层
			编程语言是汇编语言
			汇编语言可以翻译成可直接执行的机器语言
			完成翻译的过程的程序就是汇编器
			
		
		(6)高级语言层
			编程语言为广大程序接受的高级语言
			高级语言类别多，有Python,java等
		
		(7)应用层
			满足计算机针对某种用途而专门设计
			